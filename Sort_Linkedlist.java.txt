//optimal solution
class Solution {
    public ListNode findMiddle(ListNode head){
       ListNode slow=head;
       ListNode fast=head;
       while(fast.next!=null && fast.next.next!=null){
           slow=slow.next;
           fast=fast.next.next;
       }
        return slow;
    }
    public ListNode merge(ListNode left,ListNode right){
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        while(left!=null&& right!=null){
            if(left.val<right.val){
                curr.next=left;
                left=left.next;
            }
            else{
                curr.next=right;
                right=right.next;
            }
            curr=curr.next;
        }
        while(left!=null){
            curr.next=left;
            left=left.next;
            curr=curr.next;
        }
        while(right!=null){
            curr.next=right;
            right=right.next;
            curr=curr.next;
        }
        return dummy.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode mid=findMiddle(head);
        ListNode left=head;
        ListNode right=mid.next;
        mid.next=null;
        ListNode sortedleft=sortList(left);
        ListNode sortedright=sortList(right);
        return merge(sortedleft,sortedright);     
    }
}
//brute force approach
class Solution {
    public ListNode sortList(ListNode head) {
        ArrayList<Integer> ar=new ArrayList<>();
        ListNode temp=head;
        while(temp!=null){
            ar.add(temp.val);
            temp=temp.next;
        }
        Collections.sort(ar);
        ListNode temp2=head;
        for(int i=0;i<ar.size();i++){
            temp2.val=ar.get(i);
            temp2=temp2.next;
        }
        return head;
    }
}